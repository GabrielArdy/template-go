// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AttendanceResponse defines model for AttendanceResponse.
type AttendanceResponse struct {
	// Message QR Token
	Message string `json:"Message"`

	// Checkin Check-in time
	Checkin time.Time `json:"checkin"`

	// Checkout Check-out time
	Checkout *time.Time `json:"checkout,omitempty"`

	// TeacherId Teacher ID
	TeacherId string `json:"teacherId"`
}

// CheckinRequest defines model for CheckinRequest.
type CheckinRequest struct {
	// QRToken QR Token
	QRToken string `json:"QRToken"`

	// Checkin Check-in time
	Checkin time.Time `json:"checkin"`

	// TeacherId Teacher ID
	TeacherId string `json:"teacherId"`
}

// CheckoutRequest defines model for CheckoutRequest.
type CheckoutRequest struct {
	// QRToken QR Token
	QRToken string `json:"QRToken"`

	// Checkout Check-out time
	Checkout time.Time `json:"checkout"`

	// TeacherId Teacher ID
	TeacherId string `json:"teacherId"`
}

// CheckoutResponse defines model for CheckoutResponse.
type CheckoutResponse struct {
	// Message QR Token
	Message string `json:"Message"`

	// Checkin Check-in time
	Checkin *time.Time `json:"checkin,omitempty"`

	// Checkout Check-out time
	Checkout time.Time `json:"checkout"`

	// TeacherId Teacher ID
	TeacherId string `json:"teacherId"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Fields Fields with errors
	Fields string `json:"fields"`

	// Message Error message
	Message string `json:"message"`
}

// Success defines model for Success.
type Success struct {
	// Code Success code
	Code int32 `json:"code"`

	// Message Success message
	Message string `json:"message"`
}

// UserLoginRequest defines model for UserLoginRequest.
type UserLoginRequest struct {
	// Password Password
	Password string `json:"password"`

	// User Teacher ID
	User string `json:"user"`
}

// UserLoginResponse defines model for UserLoginResponse.
type UserLoginResponse struct {
	// TeacherId Teacher ID
	TeacherId string `json:"teacherId"`

	// Token JWT token
	Token string `json:"token"`
}

// UserSignup defines model for UserSignup.
type UserSignup struct {
	// Email Email address
	Email openapi_types.Email `json:"email"`

	// FirstName First name
	FirstName string `json:"firstName"`

	// Grade Grade
	Grade string `json:"grade"`

	// LastName Last name
	LastName string `json:"lastName"`

	// Password Password
	Password string `json:"password"`

	// Position Position
	Position string `json:"position"`

	// Role Role
	Role string `json:"role"`

	// Status Status
	Status string `json:"status"`

	// TeacherId Teacher ID
	TeacherId string `json:"teacherId"`
}

// PostApiAttendanceCheckinJSONRequestBody defines body for PostApiAttendanceCheckin for application/json ContentType.
type PostApiAttendanceCheckinJSONRequestBody = CheckinRequest

// PostApiAttendanceCheckoutJSONRequestBody defines body for PostApiAttendanceCheckout for application/json ContentType.
type PostApiAttendanceCheckoutJSONRequestBody = CheckoutRequest

// PostApiAuthLoginJSONRequestBody defines body for PostApiAuthLogin for application/json ContentType.
type PostApiAuthLoginJSONRequestBody = UserLoginRequest

// PostApiAuthRegisterJSONRequestBody defines body for PostApiAuthRegister for application/json ContentType.
type PostApiAuthRegisterJSONRequestBody = UserSignup

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /api/actuator/health)
	GetApiActuatorHealth(ctx echo.Context) error
	// Record check-in time
	// (POST /api/attendance/checkin)
	PostApiAttendanceCheckin(ctx echo.Context) error
	// Record check-out time
	// (POST /api/attendance/checkout)
	PostApiAttendanceCheckout(ctx echo.Context) error
	// Login a user
	// (POST /api/auth/login)
	PostApiAuthLogin(ctx echo.Context) error
	// Register a new user
	// (POST /api/auth/register)
	PostApiAuthRegister(ctx echo.Context) error
	// Validate a user
	// (GET /api/auth/validate/{id})
	GetApiAuthValidateId(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiActuatorHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiActuatorHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiActuatorHealth(ctx)
	return err
}

// PostApiAttendanceCheckin converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAttendanceCheckin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAttendanceCheckin(ctx)
	return err
}

// PostApiAttendanceCheckout converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAttendanceCheckout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAttendanceCheckout(ctx)
	return err
}

// PostApiAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAuthLogin(ctx)
	return err
}

// PostApiAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAuthRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAuthRegister(ctx)
	return err
}

// GetApiAuthValidateId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAuthValidateId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiAuthValidateId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/actuator/health", wrapper.GetApiActuatorHealth)
	router.POST(baseURL+"/api/attendance/checkin", wrapper.PostApiAttendanceCheckin)
	router.POST(baseURL+"/api/attendance/checkout", wrapper.PostApiAttendanceCheckout)
	router.POST(baseURL+"/api/auth/login", wrapper.PostApiAuthLogin)
	router.POST(baseURL+"/api/auth/register", wrapper.PostApiAuthRegister)
	router.GET(baseURL+"/api/auth/validate/:id", wrapper.GetApiAuthValidateId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXbVPbuBP/Kh79/y/dOIXCtH7X0sI5EB6SAHfXYW6EvYkFtuRKa0LK5LvfSLKTgBUC",
	"bUPnZniXSKt9+O1v17t3JBZ5IThwVCS8IypOIafm50dE4AnlMfRAFYIr0KeFFAVIZGBkuqAUHZmLBFQs",
	"WYFMcBKSk543ENfAiU9wUgAJiULJ+IhMfRKnEF8z3ny0oy/eMO4hy4H4ZChkTpGEJKEIb6pDtzpR4jJ9",
	"osTnKUSgcQoySpoaB/bKiz43H059IuFbySQkJPy6oGUesT8D7GL2XFxeQYza7o6V6sG3EhQ2wT7pWUh/",
	"J9jrxKaObyk2osQ1gPMfoI528an4vJbqr8L7sVr9IqWQTZBjkTgQNsKeuVsIjHHc3Jj7xjjCCKRWPmSQ",
	"JaqpZ9ece2OGqQdap3Jhki9LtHWjvl4FSuXuXLzyyoVGv4xjUOqpeFTiz0BkaUy1qh+MyhXMqQJ5IEaP",
	"NOKCKjUW0kG64/rGkZdSgfwpmhoF/tz6CueXNYIfrBmfoLvBds4HHlYNBG5pXmT6GUw66eVezI5YJzr9",
	"Hr09ZJGKeG8r3om2o+viz7OdzocWTDrfk/OIHbHotnvVbR8O/to8+nw9jtiYXea7+HffCN/QvXej3t6H",
	"TJ/T8912dCVuDwdfNrpX3a3u52gyPGn1h9n+7bjX6Xdhf39342TwbjguutAZbm4fH11vTzpn/9DkRKnx",
	"Vry6H9TtcIbUMqj7bMTLookx5JRljgrUxx5NEqmrZYH5Vt6B+ZBJhYc0B1c3kAo9Tt2dcSSpq/T2zLFD",
	"PqPL7BzQR8w8qRRyxg+AjzAl4bZLh1DMPmroqG8cr6TIHM729KlDWiHF0tFS+/Z8bZ+WOrHFHI15ShdQ",
	"9+99hEZVlop5/Kp21MTd5KM2zPhQaG8zFkNV+iZvIelGAxMTQ1OcCHmRUdQmbkAqG9XbVrvV1lKiAE4L",
	"RkKyaY6095ga8AJasIDGWFIUMkiBZjqpd2QEpk3qEqDaYY0a2QP8WLCPlfQfVljDYzuTUbjRbtvvBEfg",
	"RgctiozFRktwpSwr7FbSLLPHs+qJoYcpeArkDYvhXns6PXamzgHqfc1H+0ZOlXlO5YSExIblmbHBXFmI",
	"ZrtTsDBCFUI5YDoWyuA0e7Izm4il/QJ9EsnkWSj9X8KQhOR/wXy5C6rNLniwZUzvMxZlCdOfzNFj1h1L",
	"5RKUffLuF9q185rD1CeaeLLGwidbL2Ez4giS08wwE6Sd5R7wqgexkInl1WzOXsqvaqZ+DsHsjLs2hi3s",
	"ai9MscYq9EqwlQSbLV5zhpWYBpmeJFcTq8TUzJxr4lNjIH9hQjVn6ldGuRhlMPKoZ/aU+0SSMGIK7f6z",
	"kku9Wnh9dKrm9hcmUr0mv9LH3ZBs2j3qcRi7WHRDM5ZQhOCOJdNVY2eJ6Vklb2bqgkqaA4JUJPz6cGDU",
	"nLDjvO53Zt4lfj08s4Q8ZIm/AMjDKfLilUG/iUF1vuc9SF8beVfSD0Q800d8UsqMhCRFLMIgyPRdKhSG",
	"79vv9VbUWE2lSMpY/3FpUGGgaduqFo5WLPLg5i2ZXkz/DQAA//+vhae3cRkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
