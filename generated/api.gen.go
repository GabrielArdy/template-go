// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// CrawlRequest defines model for CrawlRequest.
type CrawlRequest struct {
	// Depth Depth of the crawl
	Depth int `json:"depth"`

	// Url URL to crawl
	Url string `json:"url"`
}

// CrawlResponse defines model for CrawlResponse.
type CrawlResponse struct {
	// Content Content of the page
	Content string `json:"content"`

	// CrawledAt Date and time when the page was crawled
	CrawledAt time.Time `json:"crawledAt"`

	// Links List of links on the page
	Links []string `json:"links"`

	// Title Title of the page
	Title string `json:"title"`

	// Url URL of the crawled page
	Url string `json:"url"`
}

// RegisterUserRequest defines model for RegisterUserRequest.
type RegisterUserRequest struct {
	// Email Email of the user
	Email string `json:"email"`

	// FirstName First name of the user
	FirstName string `json:"firstName"`

	// LastName Last name of the user
	LastName string `json:"lastName"`

	// Password Password of the user
	Password string `json:"password"`

	// Phone Phone number of the user
	Phone string `json:"phone"`

	// Username Username of the user
	Username string `json:"username"`
}

// PostApiAuthRegisterJSONRequestBody defines body for PostApiAuthRegister for application/json ContentType.
type PostApiAuthRegisterJSONRequestBody = RegisterUserRequest

// PostApiCrawlJSONRequestBody defines body for PostApiCrawl for application/json ContentType.
type PostApiCrawlJSONRequestBody = CrawlRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Register a new user
	// (POST /api/auth/register)
	PostApiAuthRegister(ctx echo.Context) error
	// Crawl data from a website
	// (POST /api/crawl)
	PostApiCrawl(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostApiAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAuthRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAuthRegister(ctx)
	return err
}

// PostApiCrawl converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiCrawl(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiCrawl(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/auth/register", wrapper.PostApiAuthRegister)
	router.POST(baseURL+"/api/crawl", wrapper.PostApiCrawl)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWTW/cNhD9K8S0R2Ulb5LW1amO7QJu3TZw7UuNoBhLsxZdiWTIkbeLYP97QYqr7EYU",
	"3BoxoAM1JB/fm3n8+ASV7oxWpNhB+Qlc1VCHoXlqcd1e0ceeHPt/Y7Uhy5JCb02Gm6HhKisNS62ghDMf",
	"FnoluCFReQTIgP7BzrQE5TID3hiCEqRiuicL2wx6205xbq4uBespAjTMxpV5HiOLSncwojq2Ut3DdpuB",
	"pY+9tFRDeRtWyCLjD+NgffdAFXsGUakzWjmaSq20YlI8JXk6dOzkGrynA67XjXRCOoFKxGAYs5gSziAo",
	"pfokscwZMglUtWDZkVg3pMblxBqdiFMPll4Wy6NXhf+ui6IM35+QwUrbDhlKqJHplcdLcWml+ttNeVxK",
	"F7SGbqFVUvRtqkI53umeIUv2+fRixb4ykqkLC08oxQBai5vwL7mlKcVrH56tx3kswpnuUKqU8lkv7jua",
	"6in08205KNklPRvdtm+JlGmv6F46JnvjyM7uUupQJhSd+/BOU+/IHmiJrR/D5LSSDFbSOv4Nu0QRfvJd",
	"QmFHs0v8rJtk/lucA73EpzDPdNLMBp1ba1tPId/HnlnEcWoKttEqQfO9DwvVd3dk53CPlq/fvP3u++Mf",
	"ipQDHVmVzMBN7Jml+6Ab9VedysKXxtutkUWDZPtSP1d2rx47wVMnenCpVtoTbmVF8QgdNMCvF9d72xWY",
	"OtMie7xHsm4QdrQoFoUfpQ0pNBJKeB1CnhY3wcg5Gpljz01uo++D2fVgem959Gm6qH0NtOMTI096bnab",
	"BIYEkON3ut58caijMa2swvz8wXlKu3vQt761tIISvsk/X5R5vCXz1B7cHmabbU8hMNwuQcyyKP4XhcM9",
	"3ZFz/vjx23usvWcgdqmhWri+qsi5Vd+2m6QfElU8tNvvv/iSvPn6VC/UI7ayFrEgz2P3DmsxZjyDty9B",
	"k/0uaYUj+0hWkLXaPo/sCPXHAHUeoPw413cd2g2U43EuUChaD5vbjwjGH55BTxn+ND6WXsLpB4/BF7D4",
	"f1g7Ps9mrHqQzDBD1MgoVlZ3AsWa7pzkOHuoqIPydnLL6GqsOMTnQLjbyzxvfV+jHZfHxbE/ryZnv9V1",
	"X/mfFIJ/HaCRi/2nz+MRbD9s/w0AAP//wrMyloQLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
